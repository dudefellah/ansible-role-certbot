---
- name: Look for the certificate
  stat:
    path: "{{ certbot_etc_dir }}/live/{{ domains | first }}/cert.pem"
  register: cert_stat

- name: Ensure other files are also present
  stat:
    path: "{{ certbot_etc_dir }}/live/{{ domains | first }}/{{ certfile }}"
  register: certfile_st
  failed_when: "not certfile_st.stat.exists"
  loop:
    - privkey.pem
    - chain.pem
  loop_control:
    loop_var: certfile
  when:
    - "cert_stat.stat.exists"

- name: Gather all domains listed in the cert
  openssl_certificate_info:
    path: "{{ certbot_etc_dir }}/live/{{ domains | first }}/cert.pem"
  register: certificate_details
  when:
    - "cert_stat.stat.exists"

- name: Create a list of DNS/IP entries from the certificate info
  set_fact:
    existing_certificate_names: >
      {{ certificate_details.subject_alt_name | default([]) | map('regex_replace', '^DNS:', '') |
         sort if cert_stat.stat.exists
         else []
      }}

- block:
    - name: Perform pre-certificate retrieval hook
      shell: "{{ certbot_pre_hook }}"
      when:
        - "certbot_pre_hook is not none"

    - name: >
        Install the certificate if it doesn't exist
      command: >-
        {{ certbot_cmd }} {{ certbot_args | join(" ") }} \
        --email {{ email | default(certbot_email) | quote }} \
        -d {{ domains | join(',') | quote }}
      register: certbot_install_cmd
      when:
        - "not existing_certificate_names"

    - name: >
        Renew the certificate if the existing cert domains don't match what we want
        or the cert is expired
      command: >-
        {{ certbot_cmd }} {{ certbot_args | join(" ") }} \
        --email {{ email | default(certbot_email) | quote }} \
        -d {{ domains | join(',') | quote }} \
        --renew-with-new-domains --expand
      register: certbot_install_cmd
      when:
        - "cert_stat.stat.exists"
        - >
          certificate_details.expired or
          ((existing_certificate_names | sort) != (domains|sort))

  always:
    - name: Run post-certificate retrieval hook
      shell: "{{ certbot_post_hook }}"
      when:
        - "certbot_post_hook is not none"

- name: Gather all domains listed in the updated cert
  openssl_certificate_info:
    path: "{{ certbot_etc_dir }}/live/{{ domains | first }}/cert.pem"
  register: updated_certificate_details
  when:
    - "certbot_install_cmd is defined"
    - "('skipped' not in certbot_install_cmd) or (not certbot_install_cmd.skipped)"
    - "certbot_install_cmd.rc == 0"

- name: Create a list of DNS/IP entries from the updated certificate for validation
  set_fact:
    updated_certificate_names: >
      {{ updated_certificate_details.subject_alt_name | default([]) | map('regex_replace', '^DNS:', '') |
         sort
      }}
  when:
    - "certbot_install_cmd is defined"
    - "('skipped' not in certbot_install_cmd) or (not certbot_install_cmd.skipped)"
    - "certbot_install_cmd.rc == 0"

- name: Fail if we don't now have what we were looking for
  fail:
    msg: |
      It looks like your certificate failed to update. You were looking for the
      following domains:

      {{ domains | join('\n') | indent(2) }}

      And have:

      {{ existing_certificate_names | join('\n') | indent(2) }}

      With a certificate that is {{ 'not' if (not updated_certificate_details.expired) }} expired.
  when:
    - "certbot_install_cmd is defined"
    - "('skipped' not in certbot_install_cmd) or (not certbot_install_cmd.skipped)"
    - "certbot_install_cmd.rc == 0"
